// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetProductProductHandlerFunc turns a function with the right signature into a get product product handler
type GetProductProductHandlerFunc func(GetProductProductParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProductProductHandlerFunc) Handle(params GetProductProductParams) middleware.Responder {
	return fn(params)
}

// GetProductProductHandler interface for that can handle valid get product product params
type GetProductProductHandler interface {
	Handle(GetProductProductParams) middleware.Responder
}

// NewGetProductProduct creates a new http.Handler for the get product product operation
func NewGetProductProduct(ctx *middleware.Context, handler GetProductProductHandler) *GetProductProduct {
	return &GetProductProduct{Context: ctx, Handler: handler}
}

/*
	GetProductProduct swagger:route GET /product/{product} getProductProduct

Returns title of to the product!
*/
type GetProductProduct struct {
	Context *middleware.Context
	Handler GetProductProductHandler
}

func (o *GetProductProduct) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetProductProductParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
