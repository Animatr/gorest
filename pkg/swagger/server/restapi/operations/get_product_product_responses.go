// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetProductProductOKCode is the HTTP code returned for type GetProductProductOK
const GetProductProductOKCode int = 200

/*
GetProductProductOK Returns the product title.

swagger:response getProductProductOK
*/
type GetProductProductOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetProductProductOK creates GetProductProductOK with default headers values
func NewGetProductProductOK() *GetProductProductOK {

	return &GetProductProductOK{}
}

// WithPayload adds the payload to the get product product o k response
func (o *GetProductProductOK) WithPayload(payload string) *GetProductProductOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get product product o k response
func (o *GetProductProductOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProductProductOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetProductProductBadRequestCode is the HTTP code returned for type GetProductProductBadRequest
const GetProductProductBadRequestCode int = 400

/*
GetProductProductBadRequest Invalid characters in "product" were provided.

swagger:response getProductProductBadRequest
*/
type GetProductProductBadRequest struct {
}

// NewGetProductProductBadRequest creates GetProductProductBadRequest with default headers values
func NewGetProductProductBadRequest() *GetProductProductBadRequest {

	return &GetProductProductBadRequest{}
}

// WriteResponse to the client
func (o *GetProductProductBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}
